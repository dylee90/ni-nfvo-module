# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Link(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, node1_id: int=None, node2_id: int=None, delay: int=None, bw: int=None):  # noqa: E501
        """Link - a model defined in Swagger

        :param id: The id of this Link.  # noqa: E501
        :type id: int
        :param node1_id: The node1_id of this Link.  # noqa: E501
        :type node1_id: int
        :param node2_id: The node2_id of this Link.  # noqa: E501
        :type node2_id: int
        :param delay: The delay of this Link.  # noqa: E501
        :type delay: int
        :param bw: The bw of this Link.  # noqa: E501
        :type bw: int
        """
        self.swagger_types = {
            'id': int,
            'node1_id': int,
            'node2_id': int,
            'delay': int,
            'bw': int
        }

        self.attribute_map = {
            'id': 'id',
            'node1_id': 'node1_id',
            'node2_id': 'node2_id',
            'delay': 'delay',
            'bw': 'bw'
        }

        self._id = id
        self._node1_id = node1_id
        self._node2_id = node2_id
        self._delay = delay
        self._bw = bw

    @classmethod
    def from_dict(cls, dikt) -> 'Link':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Link of this Link.  # noqa: E501
        :rtype: Link
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Link.


        :return: The id of this Link.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Link.


        :param id: The id of this Link.
        :type id: int
        """

        self._id = id

    @property
    def node1_id(self) -> int:
        """Gets the node1_id of this Link.


        :return: The node1_id of this Link.
        :rtype: int
        """
        return self._node1_id

    @node1_id.setter
    def node1_id(self, node1_id: int):
        """Sets the node1_id of this Link.


        :param node1_id: The node1_id of this Link.
        :type node1_id: int
        """

        self._node1_id = node1_id

    @property
    def node2_id(self) -> int:
        """Gets the node2_id of this Link.


        :return: The node2_id of this Link.
        :rtype: int
        """
        return self._node2_id

    @node2_id.setter
    def node2_id(self, node2_id: int):
        """Sets the node2_id of this Link.


        :param node2_id: The node2_id of this Link.
        :type node2_id: int
        """

        self._node2_id = node2_id

    @property
    def delay(self) -> int:
        """Gets the delay of this Link.


        :return: The delay of this Link.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay: int):
        """Sets the delay of this Link.


        :param delay: The delay of this Link.
        :type delay: int
        """

        self._delay = delay

    @property
    def bw(self) -> int:
        """Gets the bw of this Link.


        :return: The bw of this Link.
        :rtype: int
        """
        return self._bw

    @bw.setter
    def bw(self, bw: int):
        """Sets the bw of this Link.


        :param bw: The bw of this Link.
        :type bw: int
        """

        self._bw = bw
