# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class VNFType(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, capacity: int=None, delay: int=None, n_cores: int=None, ram: int=None):  # noqa: E501
        """VNFType - a model defined in Swagger

        :param name: The name of this VNFType.  # noqa: E501
        :type name: str
        :param capacity: The capacity of this VNFType.  # noqa: E501
        :type capacity: int
        :param delay: The delay of this VNFType.  # noqa: E501
        :type delay: int
        :param n_cores: The n_cores of this VNFType.  # noqa: E501
        :type n_cores: int
        :param ram: The ram of this VNFType.  # noqa: E501
        :type ram: int
        """
        self.swagger_types = {
            'name': str,
            'capacity': int,
            'delay': int,
            'n_cores': int,
            'ram': int
        }

        self.attribute_map = {
            'name': 'name',
            'capacity': 'capacity',
            'delay': 'delay',
            'n_cores': 'n_cores',
            'ram': 'ram'
        }

        self._name = name
        self._capacity = capacity
        self._delay = delay
        self._n_cores = n_cores
        self._ram = ram

    @classmethod
    def from_dict(cls, dikt) -> 'VNFType':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VNFType of this VNFType.  # noqa: E501
        :rtype: VNFType
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this VNFType.


        :return: The name of this VNFType.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this VNFType.


        :param name: The name of this VNFType.
        :type name: str
        """

        self._name = name

    @property
    def capacity(self) -> int:
        """Gets the capacity of this VNFType.


        :return: The capacity of this VNFType.
        :rtype: int
        """
        return self._capacity

    @capacity.setter
    def capacity(self, capacity: int):
        """Sets the capacity of this VNFType.


        :param capacity: The capacity of this VNFType.
        :type capacity: int
        """

        self._capacity = capacity

    @property
    def delay(self) -> int:
        """Gets the delay of this VNFType.


        :return: The delay of this VNFType.
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay: int):
        """Sets the delay of this VNFType.


        :param delay: The delay of this VNFType.
        :type delay: int
        """

        self._delay = delay

    @property
    def n_cores(self) -> int:
        """Gets the n_cores of this VNFType.


        :return: The n_cores of this VNFType.
        :rtype: int
        """
        return self._n_cores

    @n_cores.setter
    def n_cores(self, n_cores: int):
        """Sets the n_cores of this VNFType.


        :param n_cores: The n_cores of this VNFType.
        :type n_cores: int
        """

        self._n_cores = n_cores

    @property
    def ram(self) -> int:
        """Gets the ram of this VNFType.


        :return: The ram of this VNFType.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram: int):
        """Sets the ram of this VNFType.


        :param ram: The ram of this VNFType.
        :type ram: int
        """

        self._ram = ram
