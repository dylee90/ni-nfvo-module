# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server.models.vnf_type import VNFType  # noqa: F401,E501
from swagger_server import util


class VNFInstance(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, type: VNFType=None, node_id: int=None, ip: str=None):  # noqa: E501
        """VNFInstance - a model defined in Swagger

        :param id: The id of this VNFInstance.  # noqa: E501
        :type id: int
        :param type: The type of this VNFInstance.  # noqa: E501
        :type type: VNFType
        :param node_id: The node_id of this VNFInstance.  # noqa: E501
        :type node_id: int
        :param ip: The ip of this VNFInstance.  # noqa: E501
        :type ip: str
        """
        self.swagger_types = {
            'id': int,
            'type': VNFType,
            'node_id': int,
            'ip': str
        }

        self.attribute_map = {
            'id': 'id',
            'type': 'type',
            'node_id': 'node_id',
            'ip': 'ip'
        }

        self._id = id
        self._type = type
        self._node_id = node_id
        self._ip = ip

    @classmethod
    def from_dict(cls, dikt) -> 'VNFInstance':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The VNFInstance of this VNFInstance.  # noqa: E501
        :rtype: VNFInstance
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this VNFInstance.


        :return: The id of this VNFInstance.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this VNFInstance.


        :param id: The id of this VNFInstance.
        :type id: int
        """

        self._id = id

    @property
    def type(self) -> VNFType:
        """Gets the type of this VNFInstance.


        :return: The type of this VNFInstance.
        :rtype: VNFType
        """
        return self._type

    @type.setter
    def type(self, type: VNFType):
        """Sets the type of this VNFInstance.


        :param type: The type of this VNFInstance.
        :type type: VNFType
        """

        self._type = type

    @property
    def node_id(self) -> int:
        """Gets the node_id of this VNFInstance.


        :return: The node_id of this VNFInstance.
        :rtype: int
        """
        return self._node_id

    @node_id.setter
    def node_id(self, node_id: int):
        """Sets the node_id of this VNFInstance.


        :param node_id: The node_id of this VNFInstance.
        :type node_id: int
        """

        self._node_id = node_id

    @property
    def ip(self) -> str:
        """Gets the ip of this VNFInstance.


        :return: The ip of this VNFInstance.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this VNFInstance.


        :param ip: The ip of this VNFInstance.
        :type ip: str
        """

        self._ip = ip
