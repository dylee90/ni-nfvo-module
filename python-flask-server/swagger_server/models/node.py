# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from swagger_server.models.base_model_ import Model
from swagger_server import util


class Node(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, name: str=None, ip: str=None, n_cores: int=None, core_frequency: int=None, ram: int=None, ram_frequency: int=None):  # noqa: E501
        """Node - a model defined in Swagger

        :param name: The name of this Node.  # noqa: E501
        :type name: str
        :param ip: The ip of this Node.  # noqa: E501
        :type ip: str
        :param n_cores: The n_cores of this Node.  # noqa: E501
        :type n_cores: int
        :param core_frequency: The core_frequency of this Node.  # noqa: E501
        :type core_frequency: int
        :param ram: The ram of this Node.  # noqa: E501
        :type ram: int
        :param ram_frequency: The ram_frequency of this Node.  # noqa: E501
        :type ram_frequency: int
        """
        self.swagger_types = {
            'name': str,
            'ip': str,
            'n_cores': int,
            'core_frequency': int,
            'ram': int,
            'ram_frequency': int
        }

        self.attribute_map = {
            'name': 'name',
            'ip': 'ip',
            'n_cores': 'n_cores',
            'core_frequency': 'core_frequency',
            'ram': 'ram',
            'ram_frequency': 'ram_frequency'
        }

        self._name = name
        self._ip = ip
        self._n_cores = n_cores
        self._core_frequency = core_frequency
        self._ram = ram
        self._ram_frequency = ram_frequency

    @classmethod
    def from_dict(cls, dikt) -> 'Node':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Node of this Node.  # noqa: E501
        :rtype: Node
        """
        return util.deserialize_model(dikt, cls)

    @property
    def name(self) -> str:
        """Gets the name of this Node.


        :return: The name of this Node.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Node.


        :param name: The name of this Node.
        :type name: str
        """

        self._name = name

    @property
    def ip(self) -> str:
        """Gets the ip of this Node.


        :return: The ip of this Node.
        :rtype: str
        """
        return self._ip

    @ip.setter
    def ip(self, ip: str):
        """Sets the ip of this Node.


        :param ip: The ip of this Node.
        :type ip: str
        """

        self._ip = ip

    @property
    def n_cores(self) -> int:
        """Gets the n_cores of this Node.


        :return: The n_cores of this Node.
        :rtype: int
        """
        return self._n_cores

    @n_cores.setter
    def n_cores(self, n_cores: int):
        """Sets the n_cores of this Node.


        :param n_cores: The n_cores of this Node.
        :type n_cores: int
        """

        self._n_cores = n_cores

    @property
    def core_frequency(self) -> int:
        """Gets the core_frequency of this Node.


        :return: The core_frequency of this Node.
        :rtype: int
        """
        return self._core_frequency

    @core_frequency.setter
    def core_frequency(self, core_frequency: int):
        """Sets the core_frequency of this Node.


        :param core_frequency: The core_frequency of this Node.
        :type core_frequency: int
        """

        self._core_frequency = core_frequency

    @property
    def ram(self) -> int:
        """Gets the ram of this Node.


        :return: The ram of this Node.
        :rtype: int
        """
        return self._ram

    @ram.setter
    def ram(self, ram: int):
        """Sets the ram of this Node.


        :param ram: The ram of this Node.
        :type ram: int
        """

        self._ram = ram

    @property
    def ram_frequency(self) -> int:
        """Gets the ram_frequency of this Node.


        :return: The ram_frequency of this Node.
        :rtype: int
        """
        return self._ram_frequency

    @ram_frequency.setter
    def ram_frequency(self, ram_frequency: int):
        """Sets the ram_frequency of this Node.


        :param ram_frequency: The ram_frequency of this Node.
        :type ram_frequency: int
        """

        self._ram_frequency = ram_frequency
