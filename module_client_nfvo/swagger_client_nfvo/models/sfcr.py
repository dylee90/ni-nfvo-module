# coding: utf-8

"""
    NFVO Module Service

    NFVO module service for the NI project.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class SFCR(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'arrivaltime': 'datetime',
        'src_ip': 'str',
        'dst_ip': 'str',
        'src_port': 'int',
        'dst_port': 'int',
        'bw': 'int',
        'delay': 'int',
        'duration': 'int',
        'proto': 'str',
        'nf_chain': 'list[str]'
    }

    attribute_map = {
        'id': 'id',
        'arrivaltime': 'arrivaltime',
        'src_ip': 'src_ip',
        'dst_ip': 'dst_ip',
        'src_port': 'src_port',
        'dst_port': 'dst_port',
        'bw': 'bw',
        'delay': 'delay',
        'duration': 'duration',
        'proto': 'proto',
        'nf_chain': 'nf_chain'
    }

    def __init__(self, id=None, arrivaltime=None, src_ip=None, dst_ip=None, src_port=None, dst_port=None, bw=None, delay=None, duration=None, proto=None, nf_chain=None):  # noqa: E501
        """SFCR - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._arrivaltime = None
        self._src_ip = None
        self._dst_ip = None
        self._src_port = None
        self._dst_port = None
        self._bw = None
        self._delay = None
        self._duration = None
        self._proto = None
        self._nf_chain = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if arrivaltime is not None:
            self.arrivaltime = arrivaltime
        if src_ip is not None:
            self.src_ip = src_ip
        if dst_ip is not None:
            self.dst_ip = dst_ip
        if src_port is not None:
            self.src_port = src_port
        if dst_port is not None:
            self.dst_port = dst_port
        if bw is not None:
            self.bw = bw
        if delay is not None:
            self.delay = delay
        if duration is not None:
            self.duration = duration
        if proto is not None:
            self.proto = proto
        if nf_chain is not None:
            self.nf_chain = nf_chain

    @property
    def id(self):
        """Gets the id of this SFCR.  # noqa: E501


        :return: The id of this SFCR.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this SFCR.


        :param id: The id of this SFCR.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def arrivaltime(self):
        """Gets the arrivaltime of this SFCR.  # noqa: E501


        :return: The arrivaltime of this SFCR.  # noqa: E501
        :rtype: datetime
        """
        return self._arrivaltime

    @arrivaltime.setter
    def arrivaltime(self, arrivaltime):
        """Sets the arrivaltime of this SFCR.


        :param arrivaltime: The arrivaltime of this SFCR.  # noqa: E501
        :type: datetime
        """

        self._arrivaltime = arrivaltime

    @property
    def src_ip(self):
        """Gets the src_ip of this SFCR.  # noqa: E501


        :return: The src_ip of this SFCR.  # noqa: E501
        :rtype: str
        """
        return self._src_ip

    @src_ip.setter
    def src_ip(self, src_ip):
        """Sets the src_ip of this SFCR.


        :param src_ip: The src_ip of this SFCR.  # noqa: E501
        :type: str
        """

        self._src_ip = src_ip

    @property
    def dst_ip(self):
        """Gets the dst_ip of this SFCR.  # noqa: E501


        :return: The dst_ip of this SFCR.  # noqa: E501
        :rtype: str
        """
        return self._dst_ip

    @dst_ip.setter
    def dst_ip(self, dst_ip):
        """Sets the dst_ip of this SFCR.


        :param dst_ip: The dst_ip of this SFCR.  # noqa: E501
        :type: str
        """

        self._dst_ip = dst_ip

    @property
    def src_port(self):
        """Gets the src_port of this SFCR.  # noqa: E501


        :return: The src_port of this SFCR.  # noqa: E501
        :rtype: int
        """
        return self._src_port

    @src_port.setter
    def src_port(self, src_port):
        """Sets the src_port of this SFCR.


        :param src_port: The src_port of this SFCR.  # noqa: E501
        :type: int
        """

        self._src_port = src_port

    @property
    def dst_port(self):
        """Gets the dst_port of this SFCR.  # noqa: E501


        :return: The dst_port of this SFCR.  # noqa: E501
        :rtype: int
        """
        return self._dst_port

    @dst_port.setter
    def dst_port(self, dst_port):
        """Sets the dst_port of this SFCR.


        :param dst_port: The dst_port of this SFCR.  # noqa: E501
        :type: int
        """

        self._dst_port = dst_port

    @property
    def bw(self):
        """Gets the bw of this SFCR.  # noqa: E501


        :return: The bw of this SFCR.  # noqa: E501
        :rtype: int
        """
        return self._bw

    @bw.setter
    def bw(self, bw):
        """Sets the bw of this SFCR.


        :param bw: The bw of this SFCR.  # noqa: E501
        :type: int
        """

        self._bw = bw

    @property
    def delay(self):
        """Gets the delay of this SFCR.  # noqa: E501


        :return: The delay of this SFCR.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this SFCR.


        :param delay: The delay of this SFCR.  # noqa: E501
        :type: int
        """

        self._delay = delay

    @property
    def duration(self):
        """Gets the duration of this SFCR.  # noqa: E501


        :return: The duration of this SFCR.  # noqa: E501
        :rtype: int
        """
        return self._duration

    @duration.setter
    def duration(self, duration):
        """Sets the duration of this SFCR.


        :param duration: The duration of this SFCR.  # noqa: E501
        :type: int
        """

        self._duration = duration

    @property
    def proto(self):
        """Gets the proto of this SFCR.  # noqa: E501


        :return: The proto of this SFCR.  # noqa: E501
        :rtype: str
        """
        return self._proto

    @proto.setter
    def proto(self, proto):
        """Sets the proto of this SFCR.


        :param proto: The proto of this SFCR.  # noqa: E501
        :type: str
        """

        self._proto = proto

    @property
    def nf_chain(self):
        """Gets the nf_chain of this SFCR.  # noqa: E501


        :return: The nf_chain of this SFCR.  # noqa: E501
        :rtype: list[str]
        """
        return self._nf_chain

    @nf_chain.setter
    def nf_chain(self, nf_chain):
        """Sets the nf_chain of this SFCR.


        :param nf_chain: The nf_chain of this SFCR.  # noqa: E501
        :type: list[str]
        """

        self._nf_chain = nf_chain

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(SFCR, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, SFCR):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
