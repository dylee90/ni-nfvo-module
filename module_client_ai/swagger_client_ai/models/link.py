# coding: utf-8

"""
    AI Module Service

    AI module service for the NI project.  # noqa: E501

    OpenAPI spec version: 1.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Link(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'int',
        'node1_id': 'int',
        'node2_id': 'int',
        'delay': 'int',
        'bw': 'int'
    }

    attribute_map = {
        'id': 'id',
        'node1_id': 'node1_id',
        'node2_id': 'node2_id',
        'delay': 'delay',
        'bw': 'bw'
    }

    def __init__(self, id=None, node1_id=None, node2_id=None, delay=None, bw=None):  # noqa: E501
        """Link - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._node1_id = None
        self._node2_id = None
        self._delay = None
        self._bw = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if node1_id is not None:
            self.node1_id = node1_id
        if node2_id is not None:
            self.node2_id = node2_id
        if delay is not None:
            self.delay = delay
        if bw is not None:
            self.bw = bw

    @property
    def id(self):
        """Gets the id of this Link.  # noqa: E501


        :return: The id of this Link.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Link.


        :param id: The id of this Link.  # noqa: E501
        :type: int
        """

        self._id = id

    @property
    def node1_id(self):
        """Gets the node1_id of this Link.  # noqa: E501


        :return: The node1_id of this Link.  # noqa: E501
        :rtype: int
        """
        return self._node1_id

    @node1_id.setter
    def node1_id(self, node1_id):
        """Sets the node1_id of this Link.


        :param node1_id: The node1_id of this Link.  # noqa: E501
        :type: int
        """

        self._node1_id = node1_id

    @property
    def node2_id(self):
        """Gets the node2_id of this Link.  # noqa: E501


        :return: The node2_id of this Link.  # noqa: E501
        :rtype: int
        """
        return self._node2_id

    @node2_id.setter
    def node2_id(self, node2_id):
        """Sets the node2_id of this Link.


        :param node2_id: The node2_id of this Link.  # noqa: E501
        :type: int
        """

        self._node2_id = node2_id

    @property
    def delay(self):
        """Gets the delay of this Link.  # noqa: E501


        :return: The delay of this Link.  # noqa: E501
        :rtype: int
        """
        return self._delay

    @delay.setter
    def delay(self, delay):
        """Sets the delay of this Link.


        :param delay: The delay of this Link.  # noqa: E501
        :type: int
        """

        self._delay = delay

    @property
    def bw(self):
        """Gets the bw of this Link.  # noqa: E501


        :return: The bw of this Link.  # noqa: E501
        :rtype: int
        """
        return self._bw

    @bw.setter
    def bw(self, bw):
        """Sets the bw of this Link.


        :param bw: The bw of this Link.  # noqa: E501
        :type: int
        """

        self._bw = bw

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(Link, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Link):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
